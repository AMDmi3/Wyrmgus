//       _________ __                 __
//      /   _____//  |_____________ _/  |______     ____  __ __  ______
//      \_____  \\   __\_  __ \__  \\   __\__  \   / ___\|  |  \/  ___/
//      /        \|  |  |  | \// __ \|  |  / __ \_/ /_/  >  |  /\___ |
//     /_______  /|__|  |__|  (____  /__| (____  /\___  /|____//____  >
//             \/                  \/          \//_____/            \/
//  ______________________                           ______________________
//                        T H E   W A R   B E G I N S
//         Stratagus - A free fantasy real time strategy game engine
//
//      (c) Copyright 1999-2020 by Vladi Belperchinov-Shabanski,
//		Jimmy Salmon and Andrettin
//
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; only version 2 of the License.
//
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//      02111-1307, USA.
//

#pragma once

#include "database/data_type.h"
#include "database/named_data_entry.h"

class CGraphic;
struct lua_State;

int CclDefineDefaultResourceNames(lua_State *l);
int CclDefineResource(lua_State *l);

/**
**  Indices into costs/resource/income array.
*/
enum CostType {
	TimeCost,                               /// time in game cycles

	// standard
	CopperCost,                             /// copper resource
	WoodCost,                               /// wood  resource
	OilCost,                                /// oil   resource
	// extensions
	IronCost,								/// iron resource
	StoneCost,								/// stone resource
	CoalCost,								/// coal resource

	ResearchCost,							/// research resource
	PrestigeCost,							/// prestige resource
	GoldCost,                               /// gold resource
	SilverCost,								/// silver resource
	MithrilCost,							/// mithril resource
	LimestoneCost,							/// limestone resource
	JewelryCost,							/// jewelry resource
	FurnitureCost,							/// furniture resource
	LeatherCost,							/// leather resource
	DiamondsCost,							/// diamonds resource
	EmeraldsCost,							/// emeralds resource
	LeadershipCost,							/// leadership resource
	TradeCost,								/// trade resource, generated by trader units (converted to copper when delivered)

	MaxCosts                                /// how many different costs
};

static constexpr int FoodCost = MaxCosts;
static constexpr int ScoreCost = MaxCosts + 1;
static constexpr int ManaResCost = MaxCosts + 2;
static constexpr int FreeWorkersCount = MaxCosts + 3;

namespace wyrmgus {

class resource final : public named_data_entry, public data_type<resource>
{
	Q_OBJECT

	Q_PROPERTY(int default_income MEMBER default_income READ get_default_income)
	Q_PROPERTY(int default_amount MEMBER default_amount READ get_default_amount)
	Q_PROPERTY(int base_price MEMBER base_price READ get_base_price)

public:
	static constexpr const char *class_identifier = "resource";
	static constexpr const char *database_folder = "resources";

	explicit resource(const std::string &identifier) : named_data_entry(identifier)
	{
	}

	~resource();

	virtual void process_sml_property(const sml_property &property) override;
	virtual void initialize() override;

	int get_index() const
	{
		return this->index;
	}

	CGraphic *get_icon_graphics() const
	{
		return this->icon_graphics;
	}

	const std::string &get_action_name() const
	{
		return this->action_name;
	}

	int get_default_income() const
	{
		return this->default_income;
	}

	int get_default_amount() const
	{
		return this->default_amount;
	}

	int get_base_price() const
	{
		return this->base_price;
	}

	bool IsMineResource() const;

private:
	int index = -1;
	CGraphic *icon_graphics = nullptr;
	std::filesystem::path icon_filepath;
	std::string action_name;
	int default_income = 100;
	int default_amount = 1000;
public:
	int DefaultMaxAmount = -1;
	int FinalResource = -1;
	int FinalResourceConversionRate = 100;
private:
	int base_price = 0;
public:
	int DemandElasticity = 100;
	int InputResource = 0;
	bool LuxuryResource = false;
	bool Hidden = false;
	std::vector<resource *> ChildResources; //resources (other than this one) that have this resource as their final resource

	friend int ::CclDefineDefaultResourceNames(lua_State *l);
	friend int ::CclDefineResource(lua_State *l);
};

}

/**
**  Default resources for a new player.
*/
extern int DefaultResources[MaxCosts];

/**
**  Default resources for a new player with low resources.
*/
extern int DefaultResourcesLow[MaxCosts];

/**
**  Default resources for a new player with mid resources.
*/
extern int DefaultResourcesMedium[MaxCosts];

/**
**  Default resources for a new player with high resources.
*/
extern int DefaultResourcesHigh[MaxCosts];

/**
**  Default names for the resources.
*/
extern std::string DefaultResourceNames[MaxCosts];

extern std::vector<int> LuxuryResources;

extern int GetResourceIdByName(const char *resourceName);
extern int GetResourceIdByName(lua_State *l, const char *resourceName);
extern std::string GetResourceNameById(int resource_id);
