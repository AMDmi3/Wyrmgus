$#include "stratagus.h"

$#include "ai.h"
$#include "font.h"
$#include "game.h"
$#include "iolib.h"
$#include "map.h"
$#include "minimap.h"
$#include "movie.h"
$#include "netconnect.h"
$#include "player.h"
$#include "sound.h"
$#include "sound_server.h"
$#include "ui.h"
$#include "unit.h"
$#include "unit_manager.h"
$#include "unittype.h"
$#include "video.h"
$#include "widgets.h"

$#ifdef _MSC_VER
$#pragma warning(disable:4800)
$#endif

$[
mt = { __index = function(t, key) return CIcon:Get(key) end }
Icons = {}
setmetatable(Icons, mt)

mt = { __index = function(t, key) return CUpgrade:Get(key) end }
Upgrades = {}
setmetatable(Upgrades, mt)

mt = { __index = function(t, key) return CFont:Get(key) end }
Fonts = {}
setmetatable(Fonts, mt)

mt = { __index = function(t, key) return CFontColor:Get(key) end }
FontColors = {}
setmetatable(FontColors, mt)

mt = { __index = function(t, key) return UnitTypeByIdent(key) end }
UnitTypes = {}
setmetatable(UnitTypes, mt)

function GameStarting()
end
$]

//Wyrmgus start
//#define MaxCosts 7
#define MaxCosts 12
//Wyrmgus end
#define FoodCost MaxCosts
#define ScoreCost MaxCosts + 1
#define ManaResCost MaxCosts + 2
#define FreeWorkersCount MaxCosts + 3
#define MaxResourceInfo MaxCosts + 4
#define PlayerMax 16
#define PlayerNumNeutral (PlayerMax - 1)

#define NoButton 0
#define LeftButton 2
#define MiddleButton 4
#define RightButton 8
#define UpButton 16
#define DownButton 32

$using std::string;
$using std::vector;

$pfile "ai.pkg"
$pfile "editor.pkg"
$pfile "font.pkg"
$pfile "game.pkg"
$pfile "map.pkg"
$pfile "master.pkg"
$pfile "minimap.pkg"
$pfile "network.pkg"
$pfile "particle.pkg"
$pfile "pathfinder.pkg"
$pfile "player.pkg"
$pfile "sound.pkg"
$pfile "translate.pkg"
$pfile "trigger.pkg"
$pfile "ui.pkg"
$pfile "unit.pkg"
$pfile "unittype.pkg"
$pfile "upgrade.pkg"
$pfile "video.pkg"

extern int SaveGame(const std::string filename);
extern void DeleteSaveGame(const std::string filename);

extern const char *Translate @ _(const char *str);

extern int SyncRand(void);
extern int SyncRand(int max);
extern bool CanAccessFile(const char *filename);
void Exit(int err);

$extern std::string CliMapName;
extern std::string CliMapName;
extern std::string StratagusLibPath;

//Wyrmgus start
//Grand Strategy elements

extern bool GrandStrategy;
extern std::string GrandStrategyWorld;
extern int WorldMapOffsetX;
extern int WorldMapOffsetY;
extern int GrandStrategyMapWidthIndent;
extern int GrandStrategyMapHeightIndent;

extern int GetWorldMapWidth();
extern int GetWorldMapHeight();
extern std::string GetWorldMapTileTerrain(int x, int y);
extern int GetWorldMapTileTerrainVariation(int x, int y);
extern std::string GetWorldMapTileProvinceName(int x, int y);
extern int GetWorldMapTerrainTypeId(std::string terrain_type_name);
extern int GetProvinceId(std::string province_name);
extern void SetWorldMapSize(int width, int height);
extern void SetWorldMapTileTerrain(int x, int y, int terrain);
extern void SetWorldMapTileProvince(int x, int y, std::string province_name);
extern void CalculateWorldMapTileGraphicTile(int x, int y);
extern void AddWorldMapResource(std::string resource_name, int x, int y, bool discovered);
extern void SetWorldMapResourceProspected(std::string resource_name, int x, int y, bool discovered);
extern std::string GetProvinceCulturalName(std::string province_name);
extern std::string GetProvinceCivilizationCulturalName(std::string province_name, std::string civilization_name);
extern std::string GetProvinceFactionCulturalName(std::string province_name, std::string civilization_name, std::string faction_name);
extern std::string GetProvinceCulturalSettlementName(std::string province_name);
extern std::string GetProvinceCivilizationCulturalSettlementName(std::string province_name, std::string civilization_name);
extern std::string GetProvinceFactionCulturalSettlementName(std::string province_name, std::string civilization_name, std::string faction_name);
extern void SetProvinceName(std::string old_province_name, std::string new_province_name);
extern void SetProvinceWater(std::string province_name, bool water);
extern void SetProvinceOwner(std::string province_name, std::string civilization_name, std::string faction_name);
extern void SetProvinceCivilization(std::string province_name, std::string civilization_name);
extern void SetProvinceSettlementName(std::string province_name, std::string settlement_name);
extern void SetProvinceSettlementLocation(std::string province_name, int x, int y);
extern void SetProvinceCulturalName(std::string province_name, std::string civilization_name, std::string province_cultural_name);
extern void SetProvinceFactionCulturalName(std::string province_name, std::string civilization_name, std::string faction_name, std::string province_cultural_name);
extern void SetProvinceCulturalSettlementName(std::string province_name, std::string civilization_name, std::string province_cultural_name);
extern void SetProvinceFactionCulturalSettlementName(std::string province_name, std::string civilization_name, std::string faction_name, std::string province_cultural_name);
extern void SetProvinceReferenceProvince(std::string province_name, std::string reference_province_name);
extern void SetProvinceSettlementBuilding(std::string province_name, std::string settlement_building_ident, int value);
extern void CleanGrandStrategyGame();
extern void InitializeGrandStrategyGame();
extern void CalculateProvinceBorders();
extern bool ProvinceBordersProvince(std::string province_name, std::string second_province_name);
extern bool ProvinceBordersFaction(std::string province_name, std::string faction_civilization_name, std::string faction_name);
//Wyrmgus end